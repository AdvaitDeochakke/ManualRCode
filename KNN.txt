# Load the Iris dataset
data(iris)

# Split the data into training and test sets
trainIndex <- sample(1:nrow(iris), 100)
trainData <- iris[trainIndex, ]
testData <- iris[-trainIndex, ]

# Define a function to calculate the Euclidean distance between two points
euclideanDistance <- function(x1, x2) {
  sqrt(sum((x1 - x2) ^ 2))
}

# Define the KNN function
knn <- function(trainData, testData, k) {
  # Create a vector to store the predicted classes for the test data
  predictions <- vector("character", length = nrow(testData))
  
  # Loop through each test data point
  for (i in 1:nrow(testData)) {
    # Calculate the distances between the test data point and all training data points
    distances <- apply(trainData[, 1:4], 1, euclideanDistance, x2 = testData[i, 1:4])
    
    # Find the indices of the k nearest neighbors
    neighbors <- order(distances)[1:k]
    
    # Get the classes of the k nearest neighbors
    classes <- trainData[neighbors, "Species"]
    
    # Find the most common class
    predictedClass <- names(sort(table(classes), decreasing = TRUE))[1]
    
    # Store the predicted class for the current test data point
    predictions[i] <- predictedClass
  }
  
  # Return the predicted classes for all test data points
  return(predictions)
}

# Test the KNN function with k=3
predictions <- knn(trainData, testData, k = 3)

# Calculate the accuracy of the model
actualClasses <- testData[, "Species"]
accuracy <- mean(predictions == actualClasses)
cat("Accuracy:", accuracy)
